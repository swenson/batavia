Parsed Module:
Module(Python, [Type(mod, Sum([Constructor(Module, [Field(stmt, body, seq=True)]), Constructor(Interactive, [Field(stmt, body, seq=True)]), Constructor(Expression, [Field(expr, body)]), Constructor(Suite, [Field(stmt, body, seq=True)])])), Type(stmt, Sum([Constructor(FunctionDef, [Field(identifier, name), Field(arguments, args), Field(stmt, body, seq=True), Field(expr, decorator_list, seq=True), Field(expr, returns, opt=True)]), Constructor(AsyncFunctionDef, [Field(identifier, name), Field(arguments, args), Field(stmt, body, seq=True), Field(expr, decorator_list, seq=True), Field(expr, returns, opt=True)]), Constructor(ClassDef, [Field(identifier, name), Field(expr, bases, seq=True), Field(keyword, keywords, seq=True), Field(stmt, body, seq=True), Field(expr, decorator_list, seq=True)]), Constructor(Return, [Field(expr, value, opt=True)]), Constructor(Delete, [Field(expr, targets, seq=True)]), Constructor(Assign, [Field(expr, targets, seq=True), Field(expr, value)]), Constructor(AugAssign, [Field(expr, target), Field(operator, op), Field(expr, value)]), Constructor(For, [Field(expr, target), Field(expr, iter), Field(stmt, body, seq=True), Field(stmt, orelse, seq=True)]), Constructor(AsyncFor, [Field(expr, target), Field(expr, iter), Field(stmt, body, seq=True), Field(stmt, orelse, seq=True)]), Constructor(While, [Field(expr, test), Field(stmt, body, seq=True), Field(stmt, orelse, seq=True)]), Constructor(If, [Field(expr, test), Field(stmt, body, seq=True), Field(stmt, orelse, seq=True)]), Constructor(With, [Field(withitem, items, seq=True), Field(stmt, body, seq=True)]), Constructor(AsyncWith, [Field(withitem, items, seq=True), Field(stmt, body, seq=True)]), Constructor(Raise, [Field(expr, exc, opt=True), Field(expr, cause, opt=True)]), Constructor(Try, [Field(stmt, body, seq=True), Field(excepthandler, handlers, seq=True), Field(stmt, orelse, seq=True), Field(stmt, finalbody, seq=True)]), Constructor(Assert, [Field(expr, test), Field(expr, msg, opt=True)]), Constructor(Import, [Field(alias, names, seq=True)]), Constructor(ImportFrom, [Field(identifier, module, opt=True), Field(alias, names, seq=True), Field(int, level, opt=True)]), Constructor(Global, [Field(identifier, names, seq=True)]), Constructor(Nonlocal, [Field(identifier, names, seq=True)]), Constructor(Expr, [Field(expr, value)]), Constructor(Pass, []), Constructor(Break, []), Constructor(Continue, [])], [Field(int, lineno), Field(int, col_offset)])), Type(expr, Sum([Constructor(BoolOp, [Field(boolop, op), Field(expr, values, seq=True)]), Constructor(BinOp, [Field(expr, left), Field(operator, op), Field(expr, right)]), Constructor(UnaryOp, [Field(unaryop, op), Field(expr, operand)]), Constructor(Lambda, [Field(arguments, args), Field(expr, body)]), Constructor(IfExp, [Field(expr, test), Field(expr, body), Field(expr, orelse)]), Constructor(Dict, [Field(expr, keys, seq=True), Field(expr, values, seq=True)]), Constructor(Set, [Field(expr, elts, seq=True)]), Constructor(ListComp, [Field(expr, elt), Field(comprehension, generators, seq=True)]), Constructor(SetComp, [Field(expr, elt), Field(comprehension, generators, seq=True)]), Constructor(DictComp, [Field(expr, key), Field(expr, value), Field(comprehension, generators, seq=True)]), Constructor(GeneratorExp, [Field(expr, elt), Field(comprehension, generators, seq=True)]), Constructor(Await, [Field(expr, value)]), Constructor(Yield, [Field(expr, value, opt=True)]), Constructor(YieldFrom, [Field(expr, value)]), Constructor(Compare, [Field(expr, left), Field(cmpop, ops, seq=True), Field(expr, comparators, seq=True)]), Constructor(Call, [Field(expr, func), Field(expr, args, seq=True), Field(keyword, keywords, seq=True)]), Constructor(Num, [Field(object, n)]), Constructor(Str, [Field(string, s)]), Constructor(FormattedValue, [Field(expr, value), Field(int, conversion, opt=True), Field(expr, format_spec, opt=True)]), Constructor(JoinedStr, [Field(expr, values, seq=True)]), Constructor(Bytes, [Field(bytes, s)]), Constructor(NameConstant, [Field(singleton, value)]), Constructor(Ellipsis, []), Constructor(Constant, [Field(constant, value)]), Constructor(Attribute, [Field(expr, value), Field(identifier, attr), Field(expr_context, ctx)]), Constructor(Subscript, [Field(expr, value), Field(slice, slice), Field(expr_context, ctx)]), Constructor(Starred, [Field(expr, value), Field(expr_context, ctx)]), Constructor(Name, [Field(identifier, id), Field(expr_context, ctx)]), Constructor(List, [Field(expr, elts, seq=True), Field(expr_context, ctx)]), Constructor(Tuple, [Field(expr, elts, seq=True), Field(expr_context, ctx)])], [Field(int, lineno), Field(int, col_offset)])), Type(expr_context, Sum([Constructor(Load, []), Constructor(Store, []), Constructor(Del, []), Constructor(AugLoad, []), Constructor(AugStore, []), Constructor(Param, [])])), Type(slice, Sum([Constructor(Slice, [Field(expr, lower, opt=True), Field(expr, upper, opt=True), Field(expr, step, opt=True)]), Constructor(ExtSlice, [Field(slice, dims, seq=True)]), Constructor(Index, [Field(expr, value)])])), Type(boolop, Sum([Constructor(And, []), Constructor(Or, [])])), Type(operator, Sum([Constructor(Add, []), Constructor(Sub, []), Constructor(Mult, []), Constructor(MatMult, []), Constructor(Div, []), Constructor(Mod, []), Constructor(Pow, []), Constructor(LShift, []), Constructor(RShift, []), Constructor(BitOr, []), Constructor(BitXor, []), Constructor(BitAnd, []), Constructor(FloorDiv, [])])), Type(unaryop, Sum([Constructor(Invert, []), Constructor(Not, []), Constructor(UAdd, []), Constructor(USub, [])])), Type(cmpop, Sum([Constructor(Eq, []), Constructor(NotEq, []), Constructor(Lt, []), Constructor(LtE, []), Constructor(Gt, []), Constructor(GtE, []), Constructor(Is, []), Constructor(IsNot, []), Constructor(In, []), Constructor(NotIn, [])])), Type(comprehension, Product([Field(expr, target), Field(expr, iter), Field(expr, ifs, seq=True)])), Type(excepthandler, Sum([Constructor(ExceptHandler, [Field(expr, type, opt=True), Field(identifier, name, opt=True), Field(stmt, body, seq=True)])], [Field(int, lineno), Field(int, col_offset)])), Type(arguments, Product([Field(arg, args, seq=True), Field(arg, vararg, opt=True), Field(arg, kwonlyargs, seq=True), Field(expr, kw_defaults, seq=True), Field(arg, kwarg, opt=True), Field(expr, defaults, seq=True)])), Type(arg, Product([Field(identifier, arg), Field(expr, annotation, opt=True)], [Field(int, lineno), Field(int, col_offset)])), Type(keyword, Product([Field(identifier, arg, opt=True), Field(expr, value)])), Type(alias, Product([Field(identifier, name), Field(identifier, asname, opt=True)])), Type(withitem, Product([Field(expr, context_expr), Field(expr, optional_vars, opt=True)]))])
